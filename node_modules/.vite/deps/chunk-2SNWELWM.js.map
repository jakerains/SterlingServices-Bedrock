{
  "version": 3,
  "sources": ["../../@smithy/eventstream-serde-config-resolver/dist-es/EventStreamSerdeConfig.js", "../../@aws-crypto/crc32/src/aws_crc32.ts", "../../@aws-crypto/crc32/src/index.ts", "../../@smithy/eventstream-codec/dist-es/Int64.js", "../../@smithy/eventstream-codec/dist-es/HeaderMarshaller.js", "../../@smithy/eventstream-codec/dist-es/splitMessage.js", "../../@smithy/eventstream-codec/dist-es/EventStreamCodec.js", "../../@smithy/eventstream-codec/dist-es/MessageDecoderStream.js", "../../@smithy/eventstream-codec/dist-es/MessageEncoderStream.js", "../../@smithy/eventstream-codec/dist-es/SmithyMessageDecoderStream.js", "../../@smithy/eventstream-codec/dist-es/SmithyMessageEncoderStream.js", "../../@smithy/eventstream-serde-universal/dist-es/getChunkedStream.js", "../../@smithy/eventstream-serde-universal/dist-es/getUnmarshalledStream.js", "../../@smithy/eventstream-serde-universal/dist-es/EventStreamMarshaller.js", "../../@smithy/eventstream-serde-browser/dist-es/utils.js", "../../@smithy/eventstream-serde-browser/dist-es/EventStreamMarshaller.js", "../../@smithy/eventstream-serde-browser/dist-es/provider.js"],
  "sourcesContent": ["export const resolveEventStreamSerdeConfig = (input) => ({\n    ...input,\n    eventStreamMarshaller: input.eventStreamSerdeProvider(input),\n});\n", "// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { SourceData, Checksum } from \"@aws-sdk/types\";\nimport { convertToBuffer, isEmptyData, numToUint8 } from \"@aws-crypto/util\";\nimport { Crc32 } from \"./index\";\n\nexport class AwsCrc32 implements Checksum {\n  private crc32 = new Crc32();\n\n  update(toHash: SourceData) {\n    if (isEmptyData(toHash)) return;\n\n    this.crc32.update(convertToBuffer(toHash));\n  }\n\n  async digest(): Promise<Uint8Array> {\n    return numToUint8(this.crc32.digest());\n  }\n\n  reset(): void {\n    this.crc32 = new Crc32();\n  }\n}\n", "import {uint32ArrayFrom} from \"@aws-crypto/util\";\n\nexport function crc32(data: Uint8Array): number {\n  return new Crc32().update(data).digest();\n}\n\nexport class Crc32 {\n  private checksum = 0xffffffff;\n\n  update(data: Uint8Array): this {\n    for (const byte of data) {\n      this.checksum =\n        (this.checksum >>> 8) ^ lookupTable[(this.checksum ^ byte) & 0xff];\n    }\n\n    return this;\n  }\n\n  digest(): number {\n    return (this.checksum ^ 0xffffffff) >>> 0;\n  }\n}\n\n// prettier-ignore\nconst a_lookUpTable = [\n  0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA,\n  0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,\n  0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988,\n  0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,\n  0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,\n  0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,\n  0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC,\n  0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5,\n  0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,\n  0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,\n  0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940,\n  0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,\n  0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116,\n  0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,\n  0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,\n  0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,\n  0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A,\n  0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,\n  0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818,\n  0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,\n  0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,\n  0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457,\n  0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C,\n  0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,\n  0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,\n  0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB,\n  0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0,\n  0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,\n  0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086,\n  0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,\n  0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4,\n  0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD,\n  0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A,\n  0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683,\n  0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,\n  0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,\n  0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE,\n  0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7,\n  0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,\n  0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,\n  0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252,\n  0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,\n  0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60,\n  0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,\n  0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,\n  0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F,\n  0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04,\n  0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,\n  0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A,\n  0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,\n  0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38,\n  0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21,\n  0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E,\n  0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,\n  0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,\n  0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,\n  0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2,\n  0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB,\n  0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0,\n  0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,\n  0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6,\n  0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,\n  0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,\n  0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D,\n];\nconst lookupTable: Uint32Array = uint32ArrayFrom(a_lookUpTable)\nexport { AwsCrc32 } from \"./aws_crc32\";\n", "import { toHex } from \"@smithy/util-hex-encoding\";\nexport class Int64 {\n    constructor(bytes) {\n        this.bytes = bytes;\n        if (bytes.byteLength !== 8) {\n            throw new Error(\"Int64 buffers must be exactly 8 bytes\");\n        }\n    }\n    static fromNumber(number) {\n        if (number > 9223372036854776000 || number < -9223372036854776000) {\n            throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);\n        }\n        const bytes = new Uint8Array(8);\n        for (let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {\n            bytes[i] = remaining;\n        }\n        if (number < 0) {\n            negate(bytes);\n        }\n        return new Int64(bytes);\n    }\n    valueOf() {\n        const bytes = this.bytes.slice(0);\n        const negative = bytes[0] & 0b10000000;\n        if (negative) {\n            negate(bytes);\n        }\n        return parseInt(toHex(bytes), 16) * (negative ? -1 : 1);\n    }\n    toString() {\n        return String(this.valueOf());\n    }\n}\nfunction negate(bytes) {\n    for (let i = 0; i < 8; i++) {\n        bytes[i] ^= 0xff;\n    }\n    for (let i = 7; i > -1; i--) {\n        bytes[i]++;\n        if (bytes[i] !== 0)\n            break;\n    }\n}\n", "import { fromHex, toHex } from \"@smithy/util-hex-encoding\";\nimport { Int64 } from \"./Int64\";\nexport class HeaderMarshaller {\n    constructor(toUtf8, fromUtf8) {\n        this.toUtf8 = toUtf8;\n        this.fromUtf8 = fromUtf8;\n    }\n    format(headers) {\n        const chunks = [];\n        for (const headerName of Object.keys(headers)) {\n            const bytes = this.fromUtf8(headerName);\n            chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));\n        }\n        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));\n        let position = 0;\n        for (const chunk of chunks) {\n            out.set(chunk, position);\n            position += chunk.byteLength;\n        }\n        return out;\n    }\n    formatHeaderValue(header) {\n        switch (header.type) {\n            case \"boolean\":\n                return Uint8Array.from([header.value ? 0 : 1]);\n            case \"byte\":\n                return Uint8Array.from([2, header.value]);\n            case \"short\":\n                const shortView = new DataView(new ArrayBuffer(3));\n                shortView.setUint8(0, 3);\n                shortView.setInt16(1, header.value, false);\n                return new Uint8Array(shortView.buffer);\n            case \"integer\":\n                const intView = new DataView(new ArrayBuffer(5));\n                intView.setUint8(0, 4);\n                intView.setInt32(1, header.value, false);\n                return new Uint8Array(intView.buffer);\n            case \"long\":\n                const longBytes = new Uint8Array(9);\n                longBytes[0] = 5;\n                longBytes.set(header.value.bytes, 1);\n                return longBytes;\n            case \"binary\":\n                const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));\n                binView.setUint8(0, 6);\n                binView.setUint16(1, header.value.byteLength, false);\n                const binBytes = new Uint8Array(binView.buffer);\n                binBytes.set(header.value, 3);\n                return binBytes;\n            case \"string\":\n                const utf8Bytes = this.fromUtf8(header.value);\n                const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));\n                strView.setUint8(0, 7);\n                strView.setUint16(1, utf8Bytes.byteLength, false);\n                const strBytes = new Uint8Array(strView.buffer);\n                strBytes.set(utf8Bytes, 3);\n                return strBytes;\n            case \"timestamp\":\n                const tsBytes = new Uint8Array(9);\n                tsBytes[0] = 8;\n                tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);\n                return tsBytes;\n            case \"uuid\":\n                if (!UUID_PATTERN.test(header.value)) {\n                    throw new Error(`Invalid UUID received: ${header.value}`);\n                }\n                const uuidBytes = new Uint8Array(17);\n                uuidBytes[0] = 9;\n                uuidBytes.set(fromHex(header.value.replace(/\\-/g, \"\")), 1);\n                return uuidBytes;\n        }\n    }\n    parse(headers) {\n        const out = {};\n        let position = 0;\n        while (position < headers.byteLength) {\n            const nameLength = headers.getUint8(position++);\n            const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));\n            position += nameLength;\n            switch (headers.getUint8(position++)) {\n                case 0:\n                    out[name] = {\n                        type: BOOLEAN_TAG,\n                        value: true,\n                    };\n                    break;\n                case 1:\n                    out[name] = {\n                        type: BOOLEAN_TAG,\n                        value: false,\n                    };\n                    break;\n                case 2:\n                    out[name] = {\n                        type: BYTE_TAG,\n                        value: headers.getInt8(position++),\n                    };\n                    break;\n                case 3:\n                    out[name] = {\n                        type: SHORT_TAG,\n                        value: headers.getInt16(position, false),\n                    };\n                    position += 2;\n                    break;\n                case 4:\n                    out[name] = {\n                        type: INT_TAG,\n                        value: headers.getInt32(position, false),\n                    };\n                    position += 4;\n                    break;\n                case 5:\n                    out[name] = {\n                        type: LONG_TAG,\n                        value: new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)),\n                    };\n                    position += 8;\n                    break;\n                case 6:\n                    const binaryLength = headers.getUint16(position, false);\n                    position += 2;\n                    out[name] = {\n                        type: BINARY_TAG,\n                        value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength),\n                    };\n                    position += binaryLength;\n                    break;\n                case 7:\n                    const stringLength = headers.getUint16(position, false);\n                    position += 2;\n                    out[name] = {\n                        type: STRING_TAG,\n                        value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength)),\n                    };\n                    position += stringLength;\n                    break;\n                case 8:\n                    out[name] = {\n                        type: TIMESTAMP_TAG,\n                        value: new Date(new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf()),\n                    };\n                    position += 8;\n                    break;\n                case 9:\n                    const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);\n                    position += 16;\n                    out[name] = {\n                        type: UUID_TAG,\n                        value: `${toHex(uuidBytes.subarray(0, 4))}-${toHex(uuidBytes.subarray(4, 6))}-${toHex(uuidBytes.subarray(6, 8))}-${toHex(uuidBytes.subarray(8, 10))}-${toHex(uuidBytes.subarray(10))}`,\n                    };\n                    break;\n                default:\n                    throw new Error(`Unrecognized header type tag`);\n            }\n        }\n        return out;\n    }\n}\nvar HEADER_VALUE_TYPE;\n(function (HEADER_VALUE_TYPE) {\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolTrue\"] = 0] = \"boolTrue\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolFalse\"] = 1] = \"boolFalse\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byte\"] = 2] = \"byte\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"short\"] = 3] = \"short\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"integer\"] = 4] = \"integer\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"long\"] = 5] = \"long\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byteArray\"] = 6] = \"byteArray\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"string\"] = 7] = \"string\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"timestamp\"] = 8] = \"timestamp\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"uuid\"] = 9] = \"uuid\";\n})(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));\nconst BOOLEAN_TAG = \"boolean\";\nconst BYTE_TAG = \"byte\";\nconst SHORT_TAG = \"short\";\nconst INT_TAG = \"integer\";\nconst LONG_TAG = \"long\";\nconst BINARY_TAG = \"binary\";\nconst STRING_TAG = \"string\";\nconst TIMESTAMP_TAG = \"timestamp\";\nconst UUID_TAG = \"uuid\";\nconst UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;\n", "import { Crc32 } from \"@aws-crypto/crc32\";\nconst PRELUDE_MEMBER_LENGTH = 4;\nconst PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;\nconst CHECKSUM_LENGTH = 4;\nconst MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;\nexport function splitMessage({ byteLength, byteOffset, buffer }) {\n    if (byteLength < MINIMUM_MESSAGE_LENGTH) {\n        throw new Error(\"Provided message too short to accommodate event stream message overhead\");\n    }\n    const view = new DataView(buffer, byteOffset, byteLength);\n    const messageLength = view.getUint32(0, false);\n    if (byteLength !== messageLength) {\n        throw new Error(\"Reported message length does not match received message length\");\n    }\n    const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);\n    const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);\n    const expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);\n    const checksummer = new Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));\n    if (expectedPreludeChecksum !== checksummer.digest()) {\n        throw new Error(`The prelude checksum specified in the message (${expectedPreludeChecksum}) does not match the calculated CRC32 checksum (${checksummer.digest()})`);\n    }\n    checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));\n    if (expectedMessageChecksum !== checksummer.digest()) {\n        throw new Error(`The message checksum (${checksummer.digest()}) did not match the expected value of ${expectedMessageChecksum}`);\n    }\n    return {\n        headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),\n        body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH)),\n    };\n}\n", "import { Crc32 } from \"@aws-crypto/crc32\";\nimport { HeaderMarshaller } from \"./HeaderMarshaller\";\nimport { splitMessage } from \"./splitMessage\";\nexport class EventStreamCodec {\n    constructor(toUtf8, fromUtf8) {\n        this.headerMarshaller = new HeaderMarshaller(toUtf8, fromUtf8);\n        this.messageBuffer = [];\n        this.isEndOfStream = false;\n    }\n    feed(message) {\n        this.messageBuffer.push(this.decode(message));\n    }\n    endOfStream() {\n        this.isEndOfStream = true;\n    }\n    getMessage() {\n        const message = this.messageBuffer.pop();\n        const isEndOfStream = this.isEndOfStream;\n        return {\n            getMessage() {\n                return message;\n            },\n            isEndOfStream() {\n                return isEndOfStream;\n            },\n        };\n    }\n    getAvailableMessages() {\n        const messages = this.messageBuffer;\n        this.messageBuffer = [];\n        const isEndOfStream = this.isEndOfStream;\n        return {\n            getMessages() {\n                return messages;\n            },\n            isEndOfStream() {\n                return isEndOfStream;\n            },\n        };\n    }\n    encode({ headers: rawHeaders, body }) {\n        const headers = this.headerMarshaller.format(rawHeaders);\n        const length = headers.byteLength + body.byteLength + 16;\n        const out = new Uint8Array(length);\n        const view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n        const checksum = new Crc32();\n        view.setUint32(0, length, false);\n        view.setUint32(4, headers.byteLength, false);\n        view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);\n        out.set(headers, 12);\n        out.set(body, headers.byteLength + 12);\n        view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);\n        return out;\n    }\n    decode(message) {\n        const { headers, body } = splitMessage(message);\n        return { headers: this.headerMarshaller.parse(headers), body };\n    }\n    formatHeaders(rawHeaders) {\n        return this.headerMarshaller.format(rawHeaders);\n    }\n}\n", "export class MessageDecoderStream {\n    constructor(options) {\n        this.options = options;\n    }\n    [Symbol.asyncIterator]() {\n        return this.asyncIterator();\n    }\n    async *asyncIterator() {\n        for await (const bytes of this.options.inputStream) {\n            const decoded = this.options.decoder.decode(bytes);\n            yield decoded;\n        }\n    }\n}\n", "export class MessageEncoderStream {\n    constructor(options) {\n        this.options = options;\n    }\n    [Symbol.asyncIterator]() {\n        return this.asyncIterator();\n    }\n    async *asyncIterator() {\n        for await (const msg of this.options.messageStream) {\n            const encoded = this.options.encoder.encode(msg);\n            yield encoded;\n        }\n        if (this.options.includeEndFrame) {\n            yield new Uint8Array(0);\n        }\n    }\n}\n", "export class SmithyMessageDecoderStream {\n    constructor(options) {\n        this.options = options;\n    }\n    [Symbol.asyncIterator]() {\n        return this.asyncIterator();\n    }\n    async *asyncIterator() {\n        for await (const message of this.options.messageStream) {\n            const deserialized = await this.options.deserializer(message);\n            if (deserialized === undefined)\n                continue;\n            yield deserialized;\n        }\n    }\n}\n", "export class SmithyMessageEncoderStream {\n    constructor(options) {\n        this.options = options;\n    }\n    [Symbol.asyncIterator]() {\n        return this.asyncIterator();\n    }\n    async *asyncIterator() {\n        for await (const chunk of this.options.inputStream) {\n            const payloadBuf = this.options.serializer(chunk);\n            yield payloadBuf;\n        }\n    }\n}\n", "export function getChunkedStream(source) {\n    let currentMessageTotalLength = 0;\n    let currentMessagePendingLength = 0;\n    let currentMessage = null;\n    let messageLengthBuffer = null;\n    const allocateMessage = (size) => {\n        if (typeof size !== \"number\") {\n            throw new Error(\"Attempted to allocate an event message where size was not a number: \" + size);\n        }\n        currentMessageTotalLength = size;\n        currentMessagePendingLength = 4;\n        currentMessage = new Uint8Array(size);\n        const currentMessageView = new DataView(currentMessage.buffer);\n        currentMessageView.setUint32(0, size, false);\n    };\n    const iterator = async function* () {\n        const sourceIterator = source[Symbol.asyncIterator]();\n        while (true) {\n            const { value, done } = await sourceIterator.next();\n            if (done) {\n                if (!currentMessageTotalLength) {\n                    return;\n                }\n                else if (currentMessageTotalLength === currentMessagePendingLength) {\n                    yield currentMessage;\n                }\n                else {\n                    throw new Error(\"Truncated event message received.\");\n                }\n                return;\n            }\n            const chunkLength = value.length;\n            let currentOffset = 0;\n            while (currentOffset < chunkLength) {\n                if (!currentMessage) {\n                    const bytesRemaining = chunkLength - currentOffset;\n                    if (!messageLengthBuffer) {\n                        messageLengthBuffer = new Uint8Array(4);\n                    }\n                    const numBytesForTotal = Math.min(4 - currentMessagePendingLength, bytesRemaining);\n                    messageLengthBuffer.set(value.slice(currentOffset, currentOffset + numBytesForTotal), currentMessagePendingLength);\n                    currentMessagePendingLength += numBytesForTotal;\n                    currentOffset += numBytesForTotal;\n                    if (currentMessagePendingLength < 4) {\n                        break;\n                    }\n                    allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));\n                    messageLengthBuffer = null;\n                }\n                const numBytesToWrite = Math.min(currentMessageTotalLength - currentMessagePendingLength, chunkLength - currentOffset);\n                currentMessage.set(value.slice(currentOffset, currentOffset + numBytesToWrite), currentMessagePendingLength);\n                currentMessagePendingLength += numBytesToWrite;\n                currentOffset += numBytesToWrite;\n                if (currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength) {\n                    yield currentMessage;\n                    currentMessage = null;\n                    currentMessageTotalLength = 0;\n                    currentMessagePendingLength = 0;\n                }\n            }\n        }\n    };\n    return {\n        [Symbol.asyncIterator]: iterator,\n    };\n}\n", "export function getUnmarshalledStream(source, options) {\n    const messageUnmarshaller = getMessageUnmarshaller(options.deserializer, options.toUtf8);\n    return {\n        [Symbol.asyncIterator]: async function* () {\n            for await (const chunk of source) {\n                const message = options.eventStreamCodec.decode(chunk);\n                const type = await messageUnmarshaller(message);\n                if (type === undefined)\n                    continue;\n                yield type;\n            }\n        },\n    };\n}\nexport function getMessageUnmarshaller(deserializer, toUtf8) {\n    return async function (message) {\n        const { value: messageType } = message.headers[\":message-type\"];\n        if (messageType === \"error\") {\n            const unmodeledError = new Error(message.headers[\":error-message\"].value || \"UnknownError\");\n            unmodeledError.name = message.headers[\":error-code\"].value;\n            throw unmodeledError;\n        }\n        else if (messageType === \"exception\") {\n            const code = message.headers[\":exception-type\"].value;\n            const exception = { [code]: message };\n            const deserializedException = await deserializer(exception);\n            if (deserializedException.$unknown) {\n                const error = new Error(toUtf8(message.body));\n                error.name = code;\n                throw error;\n            }\n            throw deserializedException[code];\n        }\n        else if (messageType === \"event\") {\n            const event = {\n                [message.headers[\":event-type\"].value]: message,\n            };\n            const deserialized = await deserializer(event);\n            if (deserialized.$unknown)\n                return;\n            return deserialized;\n        }\n        else {\n            throw Error(`Unrecognizable event type: ${message.headers[\":event-type\"].value}`);\n        }\n    };\n}\n", "import { EventStreamCodec, MessageDecoderStream, MessageEncoderStream, SmithyMessageDecoderStream, SmithyMessageEncoderStream, } from \"@smithy/eventstream-codec\";\nimport { getChunkedStream } from \"./getChunkedStream\";\nimport { getMessageUnmarshaller } from \"./getUnmarshalledStream\";\nexport class EventStreamMarshaller {\n    constructor({ utf8Encoder, utf8Decoder }) {\n        this.eventStreamCodec = new EventStreamCodec(utf8Encoder, utf8Decoder);\n        this.utfEncoder = utf8Encoder;\n    }\n    deserialize(body, deserializer) {\n        const inputStream = getChunkedStream(body);\n        return new SmithyMessageDecoderStream({\n            messageStream: new MessageDecoderStream({ inputStream, decoder: this.eventStreamCodec }),\n            deserializer: getMessageUnmarshaller(deserializer, this.utfEncoder),\n        });\n    }\n    serialize(inputStream, serializer) {\n        return new MessageEncoderStream({\n            messageStream: new SmithyMessageEncoderStream({ inputStream, serializer }),\n            encoder: this.eventStreamCodec,\n            includeEndFrame: true,\n        });\n    }\n}\n", "export const readableStreamtoIterable = (readableStream) => ({\n    [Symbol.asyncIterator]: async function* () {\n        const reader = readableStream.getReader();\n        try {\n            while (true) {\n                const { done, value } = await reader.read();\n                if (done)\n                    return;\n                yield value;\n            }\n        }\n        finally {\n            reader.releaseLock();\n        }\n    },\n});\nexport const iterableToReadableStream = (asyncIterable) => {\n    const iterator = asyncIterable[Symbol.asyncIterator]();\n    return new ReadableStream({\n        async pull(controller) {\n            const { done, value } = await iterator.next();\n            if (done) {\n                return controller.close();\n            }\n            controller.enqueue(value);\n        },\n    });\n};\n", "import { EventStreamMarshaller as UniversalEventStreamMarshaller } from \"@smithy/eventstream-serde-universal\";\nimport { iterableToReadableStream, readableStreamtoIterable } from \"./utils\";\nexport class EventStreamMarshaller {\n    constructor({ utf8Encoder, utf8Decoder }) {\n        this.universalMarshaller = new UniversalEventStreamMarshaller({\n            utf8Decoder,\n            utf8Encoder,\n        });\n    }\n    deserialize(body, deserializer) {\n        const bodyIterable = isReadableStream(body) ? readableStreamtoIterable(body) : body;\n        return this.universalMarshaller.deserialize(bodyIterable, deserializer);\n    }\n    serialize(input, serializer) {\n        const serialziedIterable = this.universalMarshaller.serialize(input, serializer);\n        return typeof ReadableStream === \"function\" ? iterableToReadableStream(serialziedIterable) : serialziedIterable;\n    }\n}\nconst isReadableStream = (body) => typeof ReadableStream === \"function\" && body instanceof ReadableStream;\n", "import { EventStreamMarshaller } from \"./EventStreamMarshaller\";\nexport const eventStreamSerdeProvider = (options) => new EventStreamMarshaller(options);\n"],
  "mappings": "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",
  "names": ["AwsCrc32", "Crc32", "HEADER_VALUE_TYPE", "EventStreamMarshaller", "EventStreamMarshaller"]
}
