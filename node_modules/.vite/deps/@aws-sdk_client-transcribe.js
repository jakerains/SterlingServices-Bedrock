import {
  AwsSdkSigV4Signer,
  Client,
  Command,
  DEFAULT_MAX_ATTEMPTS,
  DEFAULT_RETRY_MODE,
  DEFAULT_USE_DUALSTACK_ENDPOINT,
  DEFAULT_USE_FIPS_ENDPOINT,
  DefaultIdentityProviderConfig,
  EndpointCache,
  FetchHttpHandler,
  HttpRequest,
  NoOpLogger,
  ServiceException,
  Sha256,
  _json,
  awsEndpointFunctions,
  calculateBodyLength,
  collectBody,
  createAggregatedClient,
  createDefaultUserAgentProvider,
  createPaginator,
  customEndpointFunctions,
  decorateServiceException,
  expectBoolean,
  expectInt32,
  expectNonNull,
  expectNumber,
  expectString,
  fromBase64,
  fromUtf8,
  getAwsRegionExtensionConfiguration,
  getContentLengthPlugin,
  getDefaultExtensionConfiguration,
  getEndpointPlugin,
  getHostHeaderPlugin,
  getHttpAuthSchemeEndpointRuleSetPlugin,
  getHttpHandlerExtensionConfiguration,
  getHttpSigningPlugin,
  getLoggerPlugin,
  getRecursionDetectionPlugin,
  getRetryPlugin,
  getSerdePlugin,
  getSmithyContext,
  getUserAgentPlugin,
  invalidProvider,
  limitedParseFloat32,
  loadConfigsForDefaultMode,
  loadRestJsonErrorCode,
  normalizeProvider,
  parseEpochTimestamp,
  parseJsonBody,
  parseJsonErrorBody,
  parseUrl,
  resolveAwsRegionExtensionConfiguration,
  resolveAwsSdkSigV4Config,
  resolveDefaultRuntimeConfig,
  resolveDefaultsModeConfig,
  resolveEndpoint,
  resolveEndpointConfig,
  resolveHostHeaderConfig,
  resolveHttpHandlerRuntimeConfig,
  resolveRegionConfig,
  resolveRetryConfig,
  resolveUserAgentConfig,
  streamCollector,
  take,
  toBase64,
  toUtf8,
  withBaseException
} from "./chunk-7ZLN6UOF.js";
import "./chunk-QTYHA4Y6.js";
import "./chunk-5WRI5ZAA.js";

// node_modules/@aws-sdk/client-transcribe/dist-es/auth/httpAuthSchemeProvider.js
var defaultTranscribeHttpAuthSchemeParametersProvider = async (config, context, input) => {
  return {
    operation: getSmithyContext(context).operation,
    region: await normalizeProvider(config.region)() || (() => {
      throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
    })()
  };
};
function createAwsAuthSigv4HttpAuthOption(authParameters) {
  return {
    schemeId: "aws.auth#sigv4",
    signingProperties: {
      name: "transcribe",
      region: authParameters.region
    },
    propertiesExtractor: (config, context) => ({
      signingProperties: {
        config,
        context
      }
    })
  };
}
var defaultTranscribeHttpAuthSchemeProvider = (authParameters) => {
  const options = [];
  switch (authParameters.operation) {
    default: {
      options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
    }
  }
  return options;
};
var resolveHttpAuthSchemeConfig = (config) => {
  const config_0 = resolveAwsSdkSigV4Config(config);
  return {
    ...config_0
  };
};

// node_modules/@aws-sdk/client-transcribe/dist-es/endpoint/EndpointParameters.js
var resolveClientEndpointParameters = (options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "transcribe"
  };
};
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// node_modules/@aws-sdk/client-transcribe/package.json
var package_default = {
  name: "@aws-sdk/client-transcribe",
  description: "AWS SDK for JavaScript Transcribe Client for Node.js, Browser and React Native",
  version: "3.696.0",
  scripts: {
    build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
    "build:cjs": "node ../../scripts/compilation/inline client-transcribe",
    "build:es": "tsc -p tsconfig.es.json",
    "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
    "build:types": "tsc -p tsconfig.types.json",
    "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
    clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
    "extract:docs": "api-extractor run --local",
    "generate:client": "node ../../scripts/generate-clients/single-service --solo transcribe"
  },
  main: "./dist-cjs/index.js",
  types: "./dist-types/index.d.ts",
  module: "./dist-es/index.js",
  sideEffects: false,
  dependencies: {
    "@aws-crypto/sha256-browser": "5.2.0",
    "@aws-crypto/sha256-js": "5.2.0",
    "@aws-sdk/client-sso-oidc": "3.696.0",
    "@aws-sdk/client-sts": "3.696.0",
    "@aws-sdk/core": "3.696.0",
    "@aws-sdk/credential-provider-node": "3.696.0",
    "@aws-sdk/middleware-host-header": "3.696.0",
    "@aws-sdk/middleware-logger": "3.696.0",
    "@aws-sdk/middleware-recursion-detection": "3.696.0",
    "@aws-sdk/middleware-user-agent": "3.696.0",
    "@aws-sdk/region-config-resolver": "3.696.0",
    "@aws-sdk/types": "3.696.0",
    "@aws-sdk/util-endpoints": "3.696.0",
    "@aws-sdk/util-user-agent-browser": "3.696.0",
    "@aws-sdk/util-user-agent-node": "3.696.0",
    "@smithy/config-resolver": "^3.0.12",
    "@smithy/core": "^2.5.3",
    "@smithy/fetch-http-handler": "^4.1.1",
    "@smithy/hash-node": "^3.0.10",
    "@smithy/invalid-dependency": "^3.0.10",
    "@smithy/middleware-content-length": "^3.0.12",
    "@smithy/middleware-endpoint": "^3.2.3",
    "@smithy/middleware-retry": "^3.0.27",
    "@smithy/middleware-serde": "^3.0.10",
    "@smithy/middleware-stack": "^3.0.10",
    "@smithy/node-config-provider": "^3.1.11",
    "@smithy/node-http-handler": "^3.3.1",
    "@smithy/protocol-http": "^4.1.7",
    "@smithy/smithy-client": "^3.4.4",
    "@smithy/types": "^3.7.1",
    "@smithy/url-parser": "^3.0.10",
    "@smithy/util-base64": "^3.0.0",
    "@smithy/util-body-length-browser": "^3.0.0",
    "@smithy/util-body-length-node": "^3.0.0",
    "@smithy/util-defaults-mode-browser": "^3.0.27",
    "@smithy/util-defaults-mode-node": "^3.0.27",
    "@smithy/util-endpoints": "^2.1.6",
    "@smithy/util-middleware": "^3.0.10",
    "@smithy/util-retry": "^3.0.10",
    "@smithy/util-utf8": "^3.0.0",
    tslib: "^2.6.2"
  },
  devDependencies: {
    "@tsconfig/node16": "16.1.3",
    "@types/node": "^16.18.96",
    concurrently: "7.0.0",
    "downlevel-dts": "0.10.1",
    rimraf: "3.0.2",
    typescript: "~4.9.5"
  },
  engines: {
    node: ">=16.0.0"
  },
  typesVersions: {
    "<4.0": {
      "dist-types/*": [
        "dist-types/ts3.4/*"
      ]
    }
  },
  files: [
    "dist-*/**"
  ],
  author: {
    name: "AWS SDK for JavaScript Team",
    url: "https://aws.amazon.com/javascript/"
  },
  license: "Apache-2.0",
  browser: {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
  },
  "react-native": {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
  },
  homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-transcribe",
  repository: {
    type: "git",
    url: "https://github.com/aws/aws-sdk-js-v3.git",
    directory: "clients/client-transcribe"
  }
};

// node_modules/@aws-sdk/client-transcribe/dist-es/endpoint/ruleset.js
var w = "required";
var x = "fn";
var y = "argv";
var z = "ref";
var a = true;
var b = "isSet";
var c = "booleanEquals";
var d = "error";
var e = "endpoint";
var f = "tree";
var g = "PartitionResult";
var h = "stringEquals";
var i = { [w]: false, "type": "String" };
var j = { [w]: true, "default": false, "type": "Boolean" };
var k = { [z]: "Endpoint" };
var l = { [x]: c, [y]: [{ [z]: "UseFIPS" }, true] };
var m = { [x]: c, [y]: [{ [z]: "UseDualStack" }, true] };
var n = {};
var o = { [z]: "Region" };
var p = { [x]: "getAttr", [y]: [{ [z]: g }, "supportsFIPS"] };
var q = { [x]: c, [y]: [true, { [x]: "getAttr", [y]: [{ [z]: g }, "supportsDualStack"] }] };
var r = { [x]: "getAttr", [y]: [{ [z]: g }, "name"] };
var s = { "url": "https://fips.transcribe.{Region}.amazonaws.com", "properties": {}, "headers": {} };
var t = [l];
var u = [m];
var v = [o];
var _data = { version: "1.0", parameters: { Region: i, UseDualStack: j, UseFIPS: j, Endpoint: i }, rules: [{ conditions: [{ [x]: b, [y]: [k] }], rules: [{ conditions: t, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: u, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: k, properties: n, headers: n }, type: e }], type: f }, { conditions: [{ [x]: b, [y]: v }], rules: [{ conditions: [{ [x]: "aws.partition", [y]: v, assign: g }], rules: [{ conditions: [l, m], rules: [{ conditions: [{ [x]: c, [y]: [a, p] }, q], rules: [{ endpoint: { url: "https://transcribe-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: t, rules: [{ conditions: [{ [x]: c, [y]: [p, a] }], rules: [{ conditions: [{ [x]: h, [y]: [r, "aws"] }], endpoint: s, type: e }, { conditions: [{ [x]: h, [y]: [r, "aws-us-gov"] }], endpoint: s, type: e }, { endpoint: { url: "https://transcribe-fips.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: u, rules: [{ conditions: [q], rules: [{ endpoint: { url: "https://transcribe.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { conditions: [{ [x]: h, [y]: [o, "cn-north-1"] }], endpoint: { url: "https://cn.transcribe.cn-north-1.amazonaws.com.cn", properties: n, headers: n }, type: e }, { conditions: [{ [x]: h, [y]: [o, "cn-northwest-1"] }], endpoint: { url: "https://cn.transcribe.cn-northwest-1.amazonaws.com.cn", properties: n, headers: n }, type: e }, { endpoint: { url: "https://transcribe.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
var ruleSet = _data;

// node_modules/@aws-sdk/client-transcribe/dist-es/endpoint/endpointResolver.js
var cache = new EndpointCache({
  size: 50,
  params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
});
var defaultEndpointResolver = (endpointParams, context = {}) => {
  return cache.get(endpointParams, () => resolveEndpoint(ruleSet, {
    endpointParams,
    logger: context.logger
  }));
};
customEndpointFunctions.aws = awsEndpointFunctions;

// node_modules/@aws-sdk/client-transcribe/dist-es/runtimeConfig.shared.js
var getRuntimeConfig = (config) => {
  return {
    apiVersion: "2017-10-26",
    base64Decoder: (config == null ? void 0 : config.base64Decoder) ?? fromBase64,
    base64Encoder: (config == null ? void 0 : config.base64Encoder) ?? toBase64,
    disableHostPrefix: (config == null ? void 0 : config.disableHostPrefix) ?? false,
    endpointProvider: (config == null ? void 0 : config.endpointProvider) ?? defaultEndpointResolver,
    extensions: (config == null ? void 0 : config.extensions) ?? [],
    httpAuthSchemeProvider: (config == null ? void 0 : config.httpAuthSchemeProvider) ?? defaultTranscribeHttpAuthSchemeProvider,
    httpAuthSchemes: (config == null ? void 0 : config.httpAuthSchemes) ?? [
      {
        schemeId: "aws.auth#sigv4",
        identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
        signer: new AwsSdkSigV4Signer()
      }
    ],
    logger: (config == null ? void 0 : config.logger) ?? new NoOpLogger(),
    serviceId: (config == null ? void 0 : config.serviceId) ?? "Transcribe",
    urlParser: (config == null ? void 0 : config.urlParser) ?? parseUrl,
    utf8Decoder: (config == null ? void 0 : config.utf8Decoder) ?? fromUtf8,
    utf8Encoder: (config == null ? void 0 : config.utf8Encoder) ?? toUtf8
  };
};

// node_modules/@aws-sdk/client-transcribe/dist-es/runtimeConfig.browser.js
var getRuntimeConfig2 = (config) => {
  const defaultsMode = resolveDefaultsModeConfig(config);
  const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);
  const clientSharedValues = getRuntimeConfig(config);
  return {
    ...clientSharedValues,
    ...config,
    runtime: "browser",
    defaultsMode,
    bodyLengthChecker: (config == null ? void 0 : config.bodyLengthChecker) ?? calculateBodyLength,
    credentialDefaultProvider: (config == null ? void 0 : config.credentialDefaultProvider) ?? ((_) => () => Promise.reject(new Error("Credential is missing"))),
    defaultUserAgentProvider: (config == null ? void 0 : config.defaultUserAgentProvider) ?? createDefaultUserAgentProvider({ serviceId: clientSharedValues.serviceId, clientVersion: package_default.version }),
    maxAttempts: (config == null ? void 0 : config.maxAttempts) ?? DEFAULT_MAX_ATTEMPTS,
    region: (config == null ? void 0 : config.region) ?? invalidProvider("Region is missing"),
    requestHandler: FetchHttpHandler.create((config == null ? void 0 : config.requestHandler) ?? defaultConfigProvider),
    retryMode: (config == null ? void 0 : config.retryMode) ?? (async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE),
    sha256: (config == null ? void 0 : config.sha256) ?? Sha256,
    streamCollector: (config == null ? void 0 : config.streamCollector) ?? streamCollector,
    useDualstackEndpoint: (config == null ? void 0 : config.useDualstackEndpoint) ?? (() => Promise.resolve(DEFAULT_USE_DUALSTACK_ENDPOINT)),
    useFipsEndpoint: (config == null ? void 0 : config.useFipsEndpoint) ?? (() => Promise.resolve(DEFAULT_USE_FIPS_ENDPOINT))
  };
};

// node_modules/@aws-sdk/client-transcribe/dist-es/auth/httpAuthExtensionConfiguration.js
var getHttpAuthExtensionConfiguration = (runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
};
var resolveHttpAuthRuntimeConfig = (config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
};

// node_modules/@aws-sdk/client-transcribe/dist-es/runtimeExtensions.js
var asPartial = (t2) => t2;
var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial(getAwsRegionExtensionConfiguration(runtimeConfig)),
    ...asPartial(getDefaultExtensionConfiguration(runtimeConfig)),
    ...asPartial(getHttpHandlerExtensionConfiguration(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...resolveAwsRegionExtensionConfiguration(extensionConfiguration),
    ...resolveDefaultRuntimeConfig(extensionConfiguration),
    ...resolveHttpHandlerRuntimeConfig(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
};

// node_modules/@aws-sdk/client-transcribe/dist-es/TranscribeClient.js
var TranscribeClient = class extends Client {
  constructor(...[configuration]) {
    const _config_0 = getRuntimeConfig2(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = resolveUserAgentConfig(_config_1);
    const _config_3 = resolveRetryConfig(_config_2);
    const _config_4 = resolveRegionConfig(_config_3);
    const _config_5 = resolveHostHeaderConfig(_config_4);
    const _config_6 = resolveEndpointConfig(_config_5);
    const _config_7 = resolveHttpAuthSchemeConfig(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    this.config = _config_8;
    this.middlewareStack.use(getUserAgentPlugin(this.config));
    this.middlewareStack.use(getRetryPlugin(this.config));
    this.middlewareStack.use(getContentLengthPlugin(this.config));
    this.middlewareStack.use(getHostHeaderPlugin(this.config));
    this.middlewareStack.use(getLoggerPlugin(this.config));
    this.middlewareStack.use(getRecursionDetectionPlugin(this.config));
    this.middlewareStack.use(getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
      httpAuthSchemeParametersProvider: defaultTranscribeHttpAuthSchemeParametersProvider,
      identityProviderConfigProvider: async (config) => new DefaultIdentityProviderConfig({
        "aws.auth#sigv4": config.credentials
      })
    }));
    this.middlewareStack.use(getHttpSigningPlugin(this.config));
  }
  destroy() {
    super.destroy();
  }
};

// node_modules/@aws-sdk/client-transcribe/dist-es/models/TranscribeServiceException.js
var TranscribeServiceException = class _TranscribeServiceException extends ServiceException {
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _TranscribeServiceException.prototype);
  }
};

// node_modules/@aws-sdk/client-transcribe/dist-es/models/models_0.js
var BadRequestException = class _BadRequestException extends TranscribeServiceException {
  constructor(opts) {
    super({
      name: "BadRequestException",
      $fault: "client",
      ...opts
    });
    this.name = "BadRequestException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _BadRequestException.prototype);
    this.Message = opts.Message;
  }
};
var BaseModelName = {
  NARROW_BAND: "NarrowBand",
  WIDE_BAND: "WideBand"
};
var CallAnalyticsFeature = {
  GENERATIVE_SUMMARIZATION: "GENERATIVE_SUMMARIZATION"
};
var CallAnalyticsSkippedReasonCode = {
  FAILED_SAFETY_GUIDELINES: "FAILED_SAFETY_GUIDELINES",
  INSUFFICIENT_CONVERSATION_CONTENT: "INSUFFICIENT_CONVERSATION_CONTENT"
};
var CallAnalyticsJobStatus = {
  COMPLETED: "COMPLETED",
  FAILED: "FAILED",
  IN_PROGRESS: "IN_PROGRESS",
  QUEUED: "QUEUED"
};
var ParticipantRole = {
  AGENT: "AGENT",
  CUSTOMER: "CUSTOMER"
};
var LanguageCode = {
  AB_GE: "ab-GE",
  AF_ZA: "af-ZA",
  AR_AE: "ar-AE",
  AR_SA: "ar-SA",
  AST_ES: "ast-ES",
  AZ_AZ: "az-AZ",
  BA_RU: "ba-RU",
  BE_BY: "be-BY",
  BG_BG: "bg-BG",
  BN_IN: "bn-IN",
  BS_BA: "bs-BA",
  CA_ES: "ca-ES",
  CKB_IQ: "ckb-IQ",
  CKB_IR: "ckb-IR",
  CS_CZ: "cs-CZ",
  CY_WL: "cy-WL",
  DA_DK: "da-DK",
  DE_CH: "de-CH",
  DE_DE: "de-DE",
  EL_GR: "el-GR",
  EN_AB: "en-AB",
  EN_AU: "en-AU",
  EN_GB: "en-GB",
  EN_IE: "en-IE",
  EN_IN: "en-IN",
  EN_NZ: "en-NZ",
  EN_US: "en-US",
  EN_WL: "en-WL",
  EN_ZA: "en-ZA",
  ES_ES: "es-ES",
  ES_US: "es-US",
  ET_ET: "et-ET",
  EU_ES: "eu-ES",
  FA_IR: "fa-IR",
  FI_FI: "fi-FI",
  FR_CA: "fr-CA",
  FR_FR: "fr-FR",
  GL_ES: "gl-ES",
  GU_IN: "gu-IN",
  HA_NG: "ha-NG",
  HE_IL: "he-IL",
  HI_IN: "hi-IN",
  HR_HR: "hr-HR",
  HU_HU: "hu-HU",
  HY_AM: "hy-AM",
  ID_ID: "id-ID",
  IS_IS: "is-IS",
  IT_IT: "it-IT",
  JA_JP: "ja-JP",
  KAB_DZ: "kab-DZ",
  KA_GE: "ka-GE",
  KK_KZ: "kk-KZ",
  KN_IN: "kn-IN",
  KO_KR: "ko-KR",
  KY_KG: "ky-KG",
  LG_IN: "lg-IN",
  LT_LT: "lt-LT",
  LV_LV: "lv-LV",
  MHR_RU: "mhr-RU",
  MI_NZ: "mi-NZ",
  MK_MK: "mk-MK",
  ML_IN: "ml-IN",
  MN_MN: "mn-MN",
  MR_IN: "mr-IN",
  MS_MY: "ms-MY",
  MT_MT: "mt-MT",
  NL_NL: "nl-NL",
  NO_NO: "no-NO",
  OR_IN: "or-IN",
  PA_IN: "pa-IN",
  PL_PL: "pl-PL",
  PS_AF: "ps-AF",
  PT_BR: "pt-BR",
  PT_PT: "pt-PT",
  RO_RO: "ro-RO",
  RU_RU: "ru-RU",
  RW_RW: "rw-RW",
  SI_LK: "si-LK",
  SK_SK: "sk-SK",
  SL_SI: "sl-SI",
  SO_SO: "so-SO",
  SR_RS: "sr-RS",
  SU_ID: "su-ID",
  SV_SE: "sv-SE",
  SW_BI: "sw-BI",
  SW_KE: "sw-KE",
  SW_RW: "sw-RW",
  SW_TZ: "sw-TZ",
  SW_UG: "sw-UG",
  TA_IN: "ta-IN",
  TE_IN: "te-IN",
  TH_TH: "th-TH",
  TL_PH: "tl-PH",
  TR_TR: "tr-TR",
  TT_RU: "tt-RU",
  UG_CN: "ug-CN",
  UK_UA: "uk-UA",
  UZ_UZ: "uz-UZ",
  VI_VN: "vi-VN",
  WO_SN: "wo-SN",
  ZH_CN: "zh-CN",
  ZH_TW: "zh-TW",
  ZU_ZA: "zu-ZA"
};
var MediaFormat = {
  AMR: "amr",
  FLAC: "flac",
  M4A: "m4a",
  MP3: "mp3",
  MP4: "mp4",
  OGG: "ogg",
  WAV: "wav",
  WEBM: "webm"
};
var PiiEntityType = {
  ADDRESS: "ADDRESS",
  ALL: "ALL",
  BANK_ACCOUNT_NUMBER: "BANK_ACCOUNT_NUMBER",
  BANK_ROUTING: "BANK_ROUTING",
  CREDIT_DEBIT_CVV: "CREDIT_DEBIT_CVV",
  CREDIT_DEBIT_EXPIRY: "CREDIT_DEBIT_EXPIRY",
  CREDIT_DEBIT_NUMBER: "CREDIT_DEBIT_NUMBER",
  EMAIL: "EMAIL",
  NAME: "NAME",
  PHONE: "PHONE",
  PIN: "PIN",
  SSN: "SSN"
};
var RedactionOutput = {
  REDACTED: "redacted",
  REDACTED_AND_UNREDACTED: "redacted_and_unredacted"
};
var RedactionType = {
  PII: "PII"
};
var VocabularyFilterMethod = {
  MASK: "mask",
  REMOVE: "remove",
  TAG: "tag"
};
var InputType = {
  POST_CALL: "POST_CALL",
  REAL_TIME: "REAL_TIME"
};
var SentimentValue = {
  MIXED: "MIXED",
  NEGATIVE: "NEGATIVE",
  NEUTRAL: "NEUTRAL",
  POSITIVE: "POSITIVE"
};
var TranscriptFilterType = {
  EXACT: "EXACT"
};
var Rule;
(function(Rule2) {
  Rule2.visit = (value, visitor) => {
    if (value.NonTalkTimeFilter !== void 0)
      return visitor.NonTalkTimeFilter(value.NonTalkTimeFilter);
    if (value.InterruptionFilter !== void 0)
      return visitor.InterruptionFilter(value.InterruptionFilter);
    if (value.TranscriptFilter !== void 0)
      return visitor.TranscriptFilter(value.TranscriptFilter);
    if (value.SentimentFilter !== void 0)
      return visitor.SentimentFilter(value.SentimentFilter);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(Rule || (Rule = {}));
var CLMLanguageCode = {
  DE_DE: "de-DE",
  EN_AU: "en-AU",
  EN_GB: "en-GB",
  EN_US: "en-US",
  ES_US: "es-US",
  HI_IN: "hi-IN",
  JA_JP: "ja-JP"
};
var ConflictException = class _ConflictException extends TranscribeServiceException {
  constructor(opts) {
    super({
      name: "ConflictException",
      $fault: "client",
      ...opts
    });
    this.name = "ConflictException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ConflictException.prototype);
    this.Message = opts.Message;
  }
};
var InternalFailureException = class _InternalFailureException extends TranscribeServiceException {
  constructor(opts) {
    super({
      name: "InternalFailureException",
      $fault: "server",
      ...opts
    });
    this.name = "InternalFailureException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _InternalFailureException.prototype);
    this.Message = opts.Message;
  }
};
var LimitExceededException = class _LimitExceededException extends TranscribeServiceException {
  constructor(opts) {
    super({
      name: "LimitExceededException",
      $fault: "client",
      ...opts
    });
    this.name = "LimitExceededException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _LimitExceededException.prototype);
    this.Message = opts.Message;
  }
};
var ModelStatus = {
  COMPLETED: "COMPLETED",
  FAILED: "FAILED",
  IN_PROGRESS: "IN_PROGRESS"
};
var VocabularyState = {
  FAILED: "FAILED",
  PENDING: "PENDING",
  READY: "READY"
};
var NotFoundException = class _NotFoundException extends TranscribeServiceException {
  constructor(opts) {
    super({
      name: "NotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "NotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _NotFoundException.prototype);
    this.Message = opts.Message;
  }
};
var MedicalScribeParticipantRole = {
  CLINICIAN: "CLINICIAN",
  PATIENT: "PATIENT"
};
var MedicalScribeLanguageCode = {
  EN_US: "en-US"
};
var MedicalScribeJobStatus = {
  COMPLETED: "COMPLETED",
  FAILED: "FAILED",
  IN_PROGRESS: "IN_PROGRESS",
  QUEUED: "QUEUED"
};
var MedicalContentIdentificationType = {
  PHI: "PHI"
};
var Specialty = {
  PRIMARYCARE: "PRIMARYCARE"
};
var TranscriptionJobStatus = {
  COMPLETED: "COMPLETED",
  FAILED: "FAILED",
  IN_PROGRESS: "IN_PROGRESS",
  QUEUED: "QUEUED"
};
var Type = {
  CONVERSATION: "CONVERSATION",
  DICTATION: "DICTATION"
};
var SubtitleFormat = {
  SRT: "srt",
  VTT: "vtt"
};
var ToxicityCategory = {
  ALL: "ALL"
};
var OutputLocationType = {
  CUSTOMER_BUCKET: "CUSTOMER_BUCKET",
  SERVICE_BUCKET: "SERVICE_BUCKET"
};

// node_modules/@aws-sdk/client-transcribe/dist-es/protocols/Aws_json1_1.js
var se_CreateCallAnalyticsCategoryCommand = async (input, context) => {
  const headers = sharedHeaders("CreateCallAnalyticsCategory");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateLanguageModelCommand = async (input, context) => {
  const headers = sharedHeaders("CreateLanguageModel");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateMedicalVocabularyCommand = async (input, context) => {
  const headers = sharedHeaders("CreateMedicalVocabulary");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateVocabularyCommand = async (input, context) => {
  const headers = sharedHeaders("CreateVocabulary");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateVocabularyFilterCommand = async (input, context) => {
  const headers = sharedHeaders("CreateVocabularyFilter");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteCallAnalyticsCategoryCommand = async (input, context) => {
  const headers = sharedHeaders("DeleteCallAnalyticsCategory");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteCallAnalyticsJobCommand = async (input, context) => {
  const headers = sharedHeaders("DeleteCallAnalyticsJob");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteLanguageModelCommand = async (input, context) => {
  const headers = sharedHeaders("DeleteLanguageModel");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteMedicalScribeJobCommand = async (input, context) => {
  const headers = sharedHeaders("DeleteMedicalScribeJob");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteMedicalTranscriptionJobCommand = async (input, context) => {
  const headers = sharedHeaders("DeleteMedicalTranscriptionJob");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteMedicalVocabularyCommand = async (input, context) => {
  const headers = sharedHeaders("DeleteMedicalVocabulary");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteTranscriptionJobCommand = async (input, context) => {
  const headers = sharedHeaders("DeleteTranscriptionJob");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteVocabularyCommand = async (input, context) => {
  const headers = sharedHeaders("DeleteVocabulary");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteVocabularyFilterCommand = async (input, context) => {
  const headers = sharedHeaders("DeleteVocabularyFilter");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeLanguageModelCommand = async (input, context) => {
  const headers = sharedHeaders("DescribeLanguageModel");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetCallAnalyticsCategoryCommand = async (input, context) => {
  const headers = sharedHeaders("GetCallAnalyticsCategory");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetCallAnalyticsJobCommand = async (input, context) => {
  const headers = sharedHeaders("GetCallAnalyticsJob");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetMedicalScribeJobCommand = async (input, context) => {
  const headers = sharedHeaders("GetMedicalScribeJob");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetMedicalTranscriptionJobCommand = async (input, context) => {
  const headers = sharedHeaders("GetMedicalTranscriptionJob");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetMedicalVocabularyCommand = async (input, context) => {
  const headers = sharedHeaders("GetMedicalVocabulary");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetTranscriptionJobCommand = async (input, context) => {
  const headers = sharedHeaders("GetTranscriptionJob");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetVocabularyCommand = async (input, context) => {
  const headers = sharedHeaders("GetVocabulary");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetVocabularyFilterCommand = async (input, context) => {
  const headers = sharedHeaders("GetVocabularyFilter");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListCallAnalyticsCategoriesCommand = async (input, context) => {
  const headers = sharedHeaders("ListCallAnalyticsCategories");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListCallAnalyticsJobsCommand = async (input, context) => {
  const headers = sharedHeaders("ListCallAnalyticsJobs");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListLanguageModelsCommand = async (input, context) => {
  const headers = sharedHeaders("ListLanguageModels");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListMedicalScribeJobsCommand = async (input, context) => {
  const headers = sharedHeaders("ListMedicalScribeJobs");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListMedicalTranscriptionJobsCommand = async (input, context) => {
  const headers = sharedHeaders("ListMedicalTranscriptionJobs");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListMedicalVocabulariesCommand = async (input, context) => {
  const headers = sharedHeaders("ListMedicalVocabularies");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListTagsForResourceCommand = async (input, context) => {
  const headers = sharedHeaders("ListTagsForResource");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListTranscriptionJobsCommand = async (input, context) => {
  const headers = sharedHeaders("ListTranscriptionJobs");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListVocabulariesCommand = async (input, context) => {
  const headers = sharedHeaders("ListVocabularies");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListVocabularyFiltersCommand = async (input, context) => {
  const headers = sharedHeaders("ListVocabularyFilters");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_StartCallAnalyticsJobCommand = async (input, context) => {
  const headers = sharedHeaders("StartCallAnalyticsJob");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_StartMedicalScribeJobCommand = async (input, context) => {
  const headers = sharedHeaders("StartMedicalScribeJob");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_StartMedicalTranscriptionJobCommand = async (input, context) => {
  const headers = sharedHeaders("StartMedicalTranscriptionJob");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_StartTranscriptionJobCommand = async (input, context) => {
  const headers = sharedHeaders("StartTranscriptionJob");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_TagResourceCommand = async (input, context) => {
  const headers = sharedHeaders("TagResource");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UntagResourceCommand = async (input, context) => {
  const headers = sharedHeaders("UntagResource");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UpdateCallAnalyticsCategoryCommand = async (input, context) => {
  const headers = sharedHeaders("UpdateCallAnalyticsCategory");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UpdateMedicalVocabularyCommand = async (input, context) => {
  const headers = sharedHeaders("UpdateMedicalVocabulary");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UpdateVocabularyCommand = async (input, context) => {
  const headers = sharedHeaders("UpdateVocabulary");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UpdateVocabularyFilterCommand = async (input, context) => {
  const headers = sharedHeaders("UpdateVocabularyFilter");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var de_CreateCallAnalyticsCategoryCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_CreateCallAnalyticsCategoryResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateLanguageModelCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateMedicalVocabularyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_CreateMedicalVocabularyResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateVocabularyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_CreateVocabularyResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateVocabularyFilterCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_CreateVocabularyFilterResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteCallAnalyticsCategoryCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteCallAnalyticsJobCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteLanguageModelCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteMedicalScribeJobCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteMedicalTranscriptionJobCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteMedicalVocabularyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteTranscriptionJobCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteVocabularyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteVocabularyFilterCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DescribeLanguageModelCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_DescribeLanguageModelResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetCallAnalyticsCategoryCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_GetCallAnalyticsCategoryResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetCallAnalyticsJobCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_GetCallAnalyticsJobResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetMedicalScribeJobCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_GetMedicalScribeJobResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetMedicalTranscriptionJobCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_GetMedicalTranscriptionJobResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetMedicalVocabularyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_GetMedicalVocabularyResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetTranscriptionJobCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_GetTranscriptionJobResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetVocabularyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_GetVocabularyResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetVocabularyFilterCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_GetVocabularyFilterResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListCallAnalyticsCategoriesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_ListCallAnalyticsCategoriesResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListCallAnalyticsJobsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_ListCallAnalyticsJobsResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListLanguageModelsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_ListLanguageModelsResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListMedicalScribeJobsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_ListMedicalScribeJobsResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListMedicalTranscriptionJobsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_ListMedicalTranscriptionJobsResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListMedicalVocabulariesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_ListMedicalVocabulariesResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListTagsForResourceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListTranscriptionJobsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_ListTranscriptionJobsResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListVocabulariesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_ListVocabulariesResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListVocabularyFiltersCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_ListVocabularyFiltersResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_StartCallAnalyticsJobCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_StartCallAnalyticsJobResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_StartMedicalScribeJobCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_StartMedicalScribeJobResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_StartMedicalTranscriptionJobCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_StartMedicalTranscriptionJobResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_StartTranscriptionJobCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_StartTranscriptionJobResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_TagResourceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_UntagResourceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_UpdateCallAnalyticsCategoryCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_UpdateCallAnalyticsCategoryResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_UpdateMedicalVocabularyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_UpdateMedicalVocabularyResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_UpdateVocabularyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_UpdateVocabularyResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_UpdateVocabularyFilterCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_UpdateVocabularyFilterResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseJsonErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "BadRequestException":
    case "com.amazonaws.transcribe#BadRequestException":
      throw await de_BadRequestExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.transcribe#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.transcribe#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.transcribe#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "NotFoundException":
    case "com.amazonaws.transcribe#NotFoundException":
      throw await de_NotFoundExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var de_BadRequestExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new BadRequestException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_ConflictExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new ConflictException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_InternalFailureExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new InternalFailureException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_LimitExceededExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new LimitExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_NotFoundExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new NotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_CallAnalyticsJob = (output, context) => {
  return take(output, {
    CallAnalyticsJobDetails: _json,
    CallAnalyticsJobName: expectString,
    CallAnalyticsJobStatus: expectString,
    ChannelDefinitions: _json,
    CompletionTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    CreationTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    DataAccessRoleArn: expectString,
    FailureReason: expectString,
    IdentifiedLanguageScore: limitedParseFloat32,
    LanguageCode: expectString,
    Media: _json,
    MediaFormat: expectString,
    MediaSampleRateHertz: expectInt32,
    Settings: _json,
    StartTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    Transcript: _json
  });
};
var de_CallAnalyticsJobSummaries = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CallAnalyticsJobSummary(entry, context);
  });
  return retVal;
};
var de_CallAnalyticsJobSummary = (output, context) => {
  return take(output, {
    CallAnalyticsJobDetails: _json,
    CallAnalyticsJobName: expectString,
    CallAnalyticsJobStatus: expectString,
    CompletionTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    CreationTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    FailureReason: expectString,
    LanguageCode: expectString,
    StartTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_)))
  });
};
var de_CategoryProperties = (output, context) => {
  return take(output, {
    CategoryName: expectString,
    CreateTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    InputType: expectString,
    LastUpdateTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    Rules: _json
  });
};
var de_CategoryPropertiesList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CategoryProperties(entry, context);
  });
  return retVal;
};
var de_CreateCallAnalyticsCategoryResponse = (output, context) => {
  return take(output, {
    CategoryProperties: (_) => de_CategoryProperties(_, context)
  });
};
var de_CreateMedicalVocabularyResponse = (output, context) => {
  return take(output, {
    FailureReason: expectString,
    LanguageCode: expectString,
    LastModifiedTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    VocabularyName: expectString,
    VocabularyState: expectString
  });
};
var de_CreateVocabularyFilterResponse = (output, context) => {
  return take(output, {
    LanguageCode: expectString,
    LastModifiedTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    VocabularyFilterName: expectString
  });
};
var de_CreateVocabularyResponse = (output, context) => {
  return take(output, {
    FailureReason: expectString,
    LanguageCode: expectString,
    LastModifiedTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    VocabularyName: expectString,
    VocabularyState: expectString
  });
};
var de_DescribeLanguageModelResponse = (output, context) => {
  return take(output, {
    LanguageModel: (_) => de_LanguageModel(_, context)
  });
};
var de_GetCallAnalyticsCategoryResponse = (output, context) => {
  return take(output, {
    CategoryProperties: (_) => de_CategoryProperties(_, context)
  });
};
var de_GetCallAnalyticsJobResponse = (output, context) => {
  return take(output, {
    CallAnalyticsJob: (_) => de_CallAnalyticsJob(_, context)
  });
};
var de_GetMedicalScribeJobResponse = (output, context) => {
  return take(output, {
    MedicalScribeJob: (_) => de_MedicalScribeJob(_, context)
  });
};
var de_GetMedicalTranscriptionJobResponse = (output, context) => {
  return take(output, {
    MedicalTranscriptionJob: (_) => de_MedicalTranscriptionJob(_, context)
  });
};
var de_GetMedicalVocabularyResponse = (output, context) => {
  return take(output, {
    DownloadUri: expectString,
    FailureReason: expectString,
    LanguageCode: expectString,
    LastModifiedTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    VocabularyName: expectString,
    VocabularyState: expectString
  });
};
var de_GetTranscriptionJobResponse = (output, context) => {
  return take(output, {
    TranscriptionJob: (_) => de_TranscriptionJob(_, context)
  });
};
var de_GetVocabularyFilterResponse = (output, context) => {
  return take(output, {
    DownloadUri: expectString,
    LanguageCode: expectString,
    LastModifiedTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    VocabularyFilterName: expectString
  });
};
var de_GetVocabularyResponse = (output, context) => {
  return take(output, {
    DownloadUri: expectString,
    FailureReason: expectString,
    LanguageCode: expectString,
    LastModifiedTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    VocabularyName: expectString,
    VocabularyState: expectString
  });
};
var de_LanguageCodeItem = (output, context) => {
  return take(output, {
    DurationInSeconds: limitedParseFloat32,
    LanguageCode: expectString
  });
};
var de_LanguageCodeList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_LanguageCodeItem(entry, context);
  });
  return retVal;
};
var de_LanguageModel = (output, context) => {
  return take(output, {
    BaseModelName: expectString,
    CreateTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    FailureReason: expectString,
    InputDataConfig: _json,
    LanguageCode: expectString,
    LastModifiedTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    ModelName: expectString,
    ModelStatus: expectString,
    UpgradeAvailability: expectBoolean
  });
};
var de_ListCallAnalyticsCategoriesResponse = (output, context) => {
  return take(output, {
    Categories: (_) => de_CategoryPropertiesList(_, context),
    NextToken: expectString
  });
};
var de_ListCallAnalyticsJobsResponse = (output, context) => {
  return take(output, {
    CallAnalyticsJobSummaries: (_) => de_CallAnalyticsJobSummaries(_, context),
    NextToken: expectString,
    Status: expectString
  });
};
var de_ListLanguageModelsResponse = (output, context) => {
  return take(output, {
    Models: (_) => de_Models(_, context),
    NextToken: expectString
  });
};
var de_ListMedicalScribeJobsResponse = (output, context) => {
  return take(output, {
    MedicalScribeJobSummaries: (_) => de_MedicalScribeJobSummaries(_, context),
    NextToken: expectString,
    Status: expectString
  });
};
var de_ListMedicalTranscriptionJobsResponse = (output, context) => {
  return take(output, {
    MedicalTranscriptionJobSummaries: (_) => de_MedicalTranscriptionJobSummaries(_, context),
    NextToken: expectString,
    Status: expectString
  });
};
var de_ListMedicalVocabulariesResponse = (output, context) => {
  return take(output, {
    NextToken: expectString,
    Status: expectString,
    Vocabularies: (_) => de_Vocabularies(_, context)
  });
};
var de_ListTranscriptionJobsResponse = (output, context) => {
  return take(output, {
    NextToken: expectString,
    Status: expectString,
    TranscriptionJobSummaries: (_) => de_TranscriptionJobSummaries(_, context)
  });
};
var de_ListVocabulariesResponse = (output, context) => {
  return take(output, {
    NextToken: expectString,
    Status: expectString,
    Vocabularies: (_) => de_Vocabularies(_, context)
  });
};
var de_ListVocabularyFiltersResponse = (output, context) => {
  return take(output, {
    NextToken: expectString,
    VocabularyFilters: (_) => de_VocabularyFilters(_, context)
  });
};
var de_MedicalScribeJob = (output, context) => {
  return take(output, {
    ChannelDefinitions: _json,
    CompletionTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    CreationTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    DataAccessRoleArn: expectString,
    FailureReason: expectString,
    LanguageCode: expectString,
    Media: _json,
    MedicalScribeJobName: expectString,
    MedicalScribeJobStatus: expectString,
    MedicalScribeOutput: _json,
    Settings: _json,
    StartTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    Tags: _json
  });
};
var de_MedicalScribeJobSummaries = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_MedicalScribeJobSummary(entry, context);
  });
  return retVal;
};
var de_MedicalScribeJobSummary = (output, context) => {
  return take(output, {
    CompletionTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    CreationTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    FailureReason: expectString,
    LanguageCode: expectString,
    MedicalScribeJobName: expectString,
    MedicalScribeJobStatus: expectString,
    StartTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_)))
  });
};
var de_MedicalTranscriptionJob = (output, context) => {
  return take(output, {
    CompletionTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    ContentIdentificationType: expectString,
    CreationTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    FailureReason: expectString,
    LanguageCode: expectString,
    Media: _json,
    MediaFormat: expectString,
    MediaSampleRateHertz: expectInt32,
    MedicalTranscriptionJobName: expectString,
    Settings: _json,
    Specialty: expectString,
    StartTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    Tags: _json,
    Transcript: _json,
    TranscriptionJobStatus: expectString,
    Type: expectString
  });
};
var de_MedicalTranscriptionJobSummaries = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_MedicalTranscriptionJobSummary(entry, context);
  });
  return retVal;
};
var de_MedicalTranscriptionJobSummary = (output, context) => {
  return take(output, {
    CompletionTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    ContentIdentificationType: expectString,
    CreationTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    FailureReason: expectString,
    LanguageCode: expectString,
    MedicalTranscriptionJobName: expectString,
    OutputLocationType: expectString,
    Specialty: expectString,
    StartTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    TranscriptionJobStatus: expectString,
    Type: expectString
  });
};
var de_Models = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_LanguageModel(entry, context);
  });
  return retVal;
};
var de_StartCallAnalyticsJobResponse = (output, context) => {
  return take(output, {
    CallAnalyticsJob: (_) => de_CallAnalyticsJob(_, context)
  });
};
var de_StartMedicalScribeJobResponse = (output, context) => {
  return take(output, {
    MedicalScribeJob: (_) => de_MedicalScribeJob(_, context)
  });
};
var de_StartMedicalTranscriptionJobResponse = (output, context) => {
  return take(output, {
    MedicalTranscriptionJob: (_) => de_MedicalTranscriptionJob(_, context)
  });
};
var de_StartTranscriptionJobResponse = (output, context) => {
  return take(output, {
    TranscriptionJob: (_) => de_TranscriptionJob(_, context)
  });
};
var de_TranscriptionJob = (output, context) => {
  return take(output, {
    CompletionTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    ContentRedaction: _json,
    CreationTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    FailureReason: expectString,
    IdentifiedLanguageScore: limitedParseFloat32,
    IdentifyLanguage: expectBoolean,
    IdentifyMultipleLanguages: expectBoolean,
    JobExecutionSettings: _json,
    LanguageCode: expectString,
    LanguageCodes: (_) => de_LanguageCodeList(_, context),
    LanguageIdSettings: _json,
    LanguageOptions: _json,
    Media: _json,
    MediaFormat: expectString,
    MediaSampleRateHertz: expectInt32,
    ModelSettings: _json,
    Settings: _json,
    StartTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    Subtitles: _json,
    Tags: _json,
    ToxicityDetection: _json,
    Transcript: _json,
    TranscriptionJobName: expectString,
    TranscriptionJobStatus: expectString
  });
};
var de_TranscriptionJobSummaries = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TranscriptionJobSummary(entry, context);
  });
  return retVal;
};
var de_TranscriptionJobSummary = (output, context) => {
  return take(output, {
    CompletionTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    ContentRedaction: _json,
    CreationTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    FailureReason: expectString,
    IdentifiedLanguageScore: limitedParseFloat32,
    IdentifyLanguage: expectBoolean,
    IdentifyMultipleLanguages: expectBoolean,
    LanguageCode: expectString,
    LanguageCodes: (_) => de_LanguageCodeList(_, context),
    ModelSettings: _json,
    OutputLocationType: expectString,
    StartTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    ToxicityDetection: _json,
    TranscriptionJobName: expectString,
    TranscriptionJobStatus: expectString
  });
};
var de_UpdateCallAnalyticsCategoryResponse = (output, context) => {
  return take(output, {
    CategoryProperties: (_) => de_CategoryProperties(_, context)
  });
};
var de_UpdateMedicalVocabularyResponse = (output, context) => {
  return take(output, {
    LanguageCode: expectString,
    LastModifiedTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    VocabularyName: expectString,
    VocabularyState: expectString
  });
};
var de_UpdateVocabularyFilterResponse = (output, context) => {
  return take(output, {
    LanguageCode: expectString,
    LastModifiedTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    VocabularyFilterName: expectString
  });
};
var de_UpdateVocabularyResponse = (output, context) => {
  return take(output, {
    LanguageCode: expectString,
    LastModifiedTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    VocabularyName: expectString,
    VocabularyState: expectString
  });
};
var de_Vocabularies = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VocabularyInfo(entry, context);
  });
  return retVal;
};
var de_VocabularyFilterInfo = (output, context) => {
  return take(output, {
    LanguageCode: expectString,
    LastModifiedTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    VocabularyFilterName: expectString
  });
};
var de_VocabularyFilters = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VocabularyFilterInfo(entry, context);
  });
  return retVal;
};
var de_VocabularyInfo = (output, context) => {
  return take(output, {
    LanguageCode: expectString,
    LastModifiedTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    VocabularyName: expectString,
    VocabularyState: expectString
  });
};
var deserializeMetadata = (output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
});
var throwDefaultError = withBaseException(TranscribeServiceException);
var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const contents = {
    protocol,
    hostname,
    port,
    method: "POST",
    path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
    headers
  };
  if (resolvedHostname !== void 0) {
    contents.hostname = resolvedHostname;
  }
  if (body !== void 0) {
    contents.body = body;
  }
  return new HttpRequest(contents);
};
function sharedHeaders(operation) {
  return {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": `Transcribe.${operation}`
  };
}

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/CreateCallAnalyticsCategoryCommand.js
var CreateCallAnalyticsCategoryCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "CreateCallAnalyticsCategory", {}).n("TranscribeClient", "CreateCallAnalyticsCategoryCommand").f(void 0, void 0).ser(se_CreateCallAnalyticsCategoryCommand).de(de_CreateCallAnalyticsCategoryCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/CreateLanguageModelCommand.js
var CreateLanguageModelCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "CreateLanguageModel", {}).n("TranscribeClient", "CreateLanguageModelCommand").f(void 0, void 0).ser(se_CreateLanguageModelCommand).de(de_CreateLanguageModelCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/CreateMedicalVocabularyCommand.js
var CreateMedicalVocabularyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "CreateMedicalVocabulary", {}).n("TranscribeClient", "CreateMedicalVocabularyCommand").f(void 0, void 0).ser(se_CreateMedicalVocabularyCommand).de(de_CreateMedicalVocabularyCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/CreateVocabularyCommand.js
var CreateVocabularyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "CreateVocabulary", {}).n("TranscribeClient", "CreateVocabularyCommand").f(void 0, void 0).ser(se_CreateVocabularyCommand).de(de_CreateVocabularyCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/CreateVocabularyFilterCommand.js
var CreateVocabularyFilterCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "CreateVocabularyFilter", {}).n("TranscribeClient", "CreateVocabularyFilterCommand").f(void 0, void 0).ser(se_CreateVocabularyFilterCommand).de(de_CreateVocabularyFilterCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/DeleteCallAnalyticsCategoryCommand.js
var DeleteCallAnalyticsCategoryCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "DeleteCallAnalyticsCategory", {}).n("TranscribeClient", "DeleteCallAnalyticsCategoryCommand").f(void 0, void 0).ser(se_DeleteCallAnalyticsCategoryCommand).de(de_DeleteCallAnalyticsCategoryCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/DeleteCallAnalyticsJobCommand.js
var DeleteCallAnalyticsJobCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "DeleteCallAnalyticsJob", {}).n("TranscribeClient", "DeleteCallAnalyticsJobCommand").f(void 0, void 0).ser(se_DeleteCallAnalyticsJobCommand).de(de_DeleteCallAnalyticsJobCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/DeleteLanguageModelCommand.js
var DeleteLanguageModelCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "DeleteLanguageModel", {}).n("TranscribeClient", "DeleteLanguageModelCommand").f(void 0, void 0).ser(se_DeleteLanguageModelCommand).de(de_DeleteLanguageModelCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/DeleteMedicalScribeJobCommand.js
var DeleteMedicalScribeJobCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "DeleteMedicalScribeJob", {}).n("TranscribeClient", "DeleteMedicalScribeJobCommand").f(void 0, void 0).ser(se_DeleteMedicalScribeJobCommand).de(de_DeleteMedicalScribeJobCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/DeleteMedicalTranscriptionJobCommand.js
var DeleteMedicalTranscriptionJobCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "DeleteMedicalTranscriptionJob", {}).n("TranscribeClient", "DeleteMedicalTranscriptionJobCommand").f(void 0, void 0).ser(se_DeleteMedicalTranscriptionJobCommand).de(de_DeleteMedicalTranscriptionJobCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/DeleteMedicalVocabularyCommand.js
var DeleteMedicalVocabularyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "DeleteMedicalVocabulary", {}).n("TranscribeClient", "DeleteMedicalVocabularyCommand").f(void 0, void 0).ser(se_DeleteMedicalVocabularyCommand).de(de_DeleteMedicalVocabularyCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/DeleteTranscriptionJobCommand.js
var DeleteTranscriptionJobCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "DeleteTranscriptionJob", {}).n("TranscribeClient", "DeleteTranscriptionJobCommand").f(void 0, void 0).ser(se_DeleteTranscriptionJobCommand).de(de_DeleteTranscriptionJobCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/DeleteVocabularyCommand.js
var DeleteVocabularyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "DeleteVocabulary", {}).n("TranscribeClient", "DeleteVocabularyCommand").f(void 0, void 0).ser(se_DeleteVocabularyCommand).de(de_DeleteVocabularyCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/DeleteVocabularyFilterCommand.js
var DeleteVocabularyFilterCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "DeleteVocabularyFilter", {}).n("TranscribeClient", "DeleteVocabularyFilterCommand").f(void 0, void 0).ser(se_DeleteVocabularyFilterCommand).de(de_DeleteVocabularyFilterCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/DescribeLanguageModelCommand.js
var DescribeLanguageModelCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "DescribeLanguageModel", {}).n("TranscribeClient", "DescribeLanguageModelCommand").f(void 0, void 0).ser(se_DescribeLanguageModelCommand).de(de_DescribeLanguageModelCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/GetCallAnalyticsCategoryCommand.js
var GetCallAnalyticsCategoryCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "GetCallAnalyticsCategory", {}).n("TranscribeClient", "GetCallAnalyticsCategoryCommand").f(void 0, void 0).ser(se_GetCallAnalyticsCategoryCommand).de(de_GetCallAnalyticsCategoryCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/GetCallAnalyticsJobCommand.js
var GetCallAnalyticsJobCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "GetCallAnalyticsJob", {}).n("TranscribeClient", "GetCallAnalyticsJobCommand").f(void 0, void 0).ser(se_GetCallAnalyticsJobCommand).de(de_GetCallAnalyticsJobCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/GetMedicalScribeJobCommand.js
var GetMedicalScribeJobCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "GetMedicalScribeJob", {}).n("TranscribeClient", "GetMedicalScribeJobCommand").f(void 0, void 0).ser(se_GetMedicalScribeJobCommand).de(de_GetMedicalScribeJobCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/GetMedicalTranscriptionJobCommand.js
var GetMedicalTranscriptionJobCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "GetMedicalTranscriptionJob", {}).n("TranscribeClient", "GetMedicalTranscriptionJobCommand").f(void 0, void 0).ser(se_GetMedicalTranscriptionJobCommand).de(de_GetMedicalTranscriptionJobCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/GetMedicalVocabularyCommand.js
var GetMedicalVocabularyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "GetMedicalVocabulary", {}).n("TranscribeClient", "GetMedicalVocabularyCommand").f(void 0, void 0).ser(se_GetMedicalVocabularyCommand).de(de_GetMedicalVocabularyCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/GetTranscriptionJobCommand.js
var GetTranscriptionJobCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "GetTranscriptionJob", {}).n("TranscribeClient", "GetTranscriptionJobCommand").f(void 0, void 0).ser(se_GetTranscriptionJobCommand).de(de_GetTranscriptionJobCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/GetVocabularyCommand.js
var GetVocabularyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "GetVocabulary", {}).n("TranscribeClient", "GetVocabularyCommand").f(void 0, void 0).ser(se_GetVocabularyCommand).de(de_GetVocabularyCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/GetVocabularyFilterCommand.js
var GetVocabularyFilterCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "GetVocabularyFilter", {}).n("TranscribeClient", "GetVocabularyFilterCommand").f(void 0, void 0).ser(se_GetVocabularyFilterCommand).de(de_GetVocabularyFilterCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/ListCallAnalyticsCategoriesCommand.js
var ListCallAnalyticsCategoriesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "ListCallAnalyticsCategories", {}).n("TranscribeClient", "ListCallAnalyticsCategoriesCommand").f(void 0, void 0).ser(se_ListCallAnalyticsCategoriesCommand).de(de_ListCallAnalyticsCategoriesCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/ListCallAnalyticsJobsCommand.js
var ListCallAnalyticsJobsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "ListCallAnalyticsJobs", {}).n("TranscribeClient", "ListCallAnalyticsJobsCommand").f(void 0, void 0).ser(se_ListCallAnalyticsJobsCommand).de(de_ListCallAnalyticsJobsCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/ListLanguageModelsCommand.js
var ListLanguageModelsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "ListLanguageModels", {}).n("TranscribeClient", "ListLanguageModelsCommand").f(void 0, void 0).ser(se_ListLanguageModelsCommand).de(de_ListLanguageModelsCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/ListMedicalScribeJobsCommand.js
var ListMedicalScribeJobsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "ListMedicalScribeJobs", {}).n("TranscribeClient", "ListMedicalScribeJobsCommand").f(void 0, void 0).ser(se_ListMedicalScribeJobsCommand).de(de_ListMedicalScribeJobsCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/ListMedicalTranscriptionJobsCommand.js
var ListMedicalTranscriptionJobsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "ListMedicalTranscriptionJobs", {}).n("TranscribeClient", "ListMedicalTranscriptionJobsCommand").f(void 0, void 0).ser(se_ListMedicalTranscriptionJobsCommand).de(de_ListMedicalTranscriptionJobsCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/ListMedicalVocabulariesCommand.js
var ListMedicalVocabulariesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "ListMedicalVocabularies", {}).n("TranscribeClient", "ListMedicalVocabulariesCommand").f(void 0, void 0).ser(se_ListMedicalVocabulariesCommand).de(de_ListMedicalVocabulariesCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/ListTagsForResourceCommand.js
var ListTagsForResourceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "ListTagsForResource", {}).n("TranscribeClient", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/ListTranscriptionJobsCommand.js
var ListTranscriptionJobsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "ListTranscriptionJobs", {}).n("TranscribeClient", "ListTranscriptionJobsCommand").f(void 0, void 0).ser(se_ListTranscriptionJobsCommand).de(de_ListTranscriptionJobsCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/ListVocabulariesCommand.js
var ListVocabulariesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "ListVocabularies", {}).n("TranscribeClient", "ListVocabulariesCommand").f(void 0, void 0).ser(se_ListVocabulariesCommand).de(de_ListVocabulariesCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/ListVocabularyFiltersCommand.js
var ListVocabularyFiltersCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "ListVocabularyFilters", {}).n("TranscribeClient", "ListVocabularyFiltersCommand").f(void 0, void 0).ser(se_ListVocabularyFiltersCommand).de(de_ListVocabularyFiltersCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/StartCallAnalyticsJobCommand.js
var StartCallAnalyticsJobCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "StartCallAnalyticsJob", {}).n("TranscribeClient", "StartCallAnalyticsJobCommand").f(void 0, void 0).ser(se_StartCallAnalyticsJobCommand).de(de_StartCallAnalyticsJobCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/StartMedicalScribeJobCommand.js
var StartMedicalScribeJobCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "StartMedicalScribeJob", {}).n("TranscribeClient", "StartMedicalScribeJobCommand").f(void 0, void 0).ser(se_StartMedicalScribeJobCommand).de(de_StartMedicalScribeJobCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/StartMedicalTranscriptionJobCommand.js
var StartMedicalTranscriptionJobCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "StartMedicalTranscriptionJob", {}).n("TranscribeClient", "StartMedicalTranscriptionJobCommand").f(void 0, void 0).ser(se_StartMedicalTranscriptionJobCommand).de(de_StartMedicalTranscriptionJobCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/StartTranscriptionJobCommand.js
var StartTranscriptionJobCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "StartTranscriptionJob", {}).n("TranscribeClient", "StartTranscriptionJobCommand").f(void 0, void 0).ser(se_StartTranscriptionJobCommand).de(de_StartTranscriptionJobCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/TagResourceCommand.js
var TagResourceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "TagResource", {}).n("TranscribeClient", "TagResourceCommand").f(void 0, void 0).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/UntagResourceCommand.js
var UntagResourceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "UntagResource", {}).n("TranscribeClient", "UntagResourceCommand").f(void 0, void 0).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/UpdateCallAnalyticsCategoryCommand.js
var UpdateCallAnalyticsCategoryCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "UpdateCallAnalyticsCategory", {}).n("TranscribeClient", "UpdateCallAnalyticsCategoryCommand").f(void 0, void 0).ser(se_UpdateCallAnalyticsCategoryCommand).de(de_UpdateCallAnalyticsCategoryCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/UpdateMedicalVocabularyCommand.js
var UpdateMedicalVocabularyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "UpdateMedicalVocabulary", {}).n("TranscribeClient", "UpdateMedicalVocabularyCommand").f(void 0, void 0).ser(se_UpdateMedicalVocabularyCommand).de(de_UpdateMedicalVocabularyCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/UpdateVocabularyCommand.js
var UpdateVocabularyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "UpdateVocabulary", {}).n("TranscribeClient", "UpdateVocabularyCommand").f(void 0, void 0).ser(se_UpdateVocabularyCommand).de(de_UpdateVocabularyCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/commands/UpdateVocabularyFilterCommand.js
var UpdateVocabularyFilterCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "UpdateVocabularyFilter", {}).n("TranscribeClient", "UpdateVocabularyFilterCommand").f(void 0, void 0).ser(se_UpdateVocabularyFilterCommand).de(de_UpdateVocabularyFilterCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe/dist-es/Transcribe.js
var commands = {
  CreateCallAnalyticsCategoryCommand,
  CreateLanguageModelCommand,
  CreateMedicalVocabularyCommand,
  CreateVocabularyCommand,
  CreateVocabularyFilterCommand,
  DeleteCallAnalyticsCategoryCommand,
  DeleteCallAnalyticsJobCommand,
  DeleteLanguageModelCommand,
  DeleteMedicalScribeJobCommand,
  DeleteMedicalTranscriptionJobCommand,
  DeleteMedicalVocabularyCommand,
  DeleteTranscriptionJobCommand,
  DeleteVocabularyCommand,
  DeleteVocabularyFilterCommand,
  DescribeLanguageModelCommand,
  GetCallAnalyticsCategoryCommand,
  GetCallAnalyticsJobCommand,
  GetMedicalScribeJobCommand,
  GetMedicalTranscriptionJobCommand,
  GetMedicalVocabularyCommand,
  GetTranscriptionJobCommand,
  GetVocabularyCommand,
  GetVocabularyFilterCommand,
  ListCallAnalyticsCategoriesCommand,
  ListCallAnalyticsJobsCommand,
  ListLanguageModelsCommand,
  ListMedicalScribeJobsCommand,
  ListMedicalTranscriptionJobsCommand,
  ListMedicalVocabulariesCommand,
  ListTagsForResourceCommand,
  ListTranscriptionJobsCommand,
  ListVocabulariesCommand,
  ListVocabularyFiltersCommand,
  StartCallAnalyticsJobCommand,
  StartMedicalScribeJobCommand,
  StartMedicalTranscriptionJobCommand,
  StartTranscriptionJobCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateCallAnalyticsCategoryCommand,
  UpdateMedicalVocabularyCommand,
  UpdateVocabularyCommand,
  UpdateVocabularyFilterCommand
};
var Transcribe = class extends TranscribeClient {
};
createAggregatedClient(commands, Transcribe);

// node_modules/@aws-sdk/client-transcribe/dist-es/pagination/ListCallAnalyticsCategoriesPaginator.js
var paginateListCallAnalyticsCategories = createPaginator(TranscribeClient, ListCallAnalyticsCategoriesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-transcribe/dist-es/pagination/ListCallAnalyticsJobsPaginator.js
var paginateListCallAnalyticsJobs = createPaginator(TranscribeClient, ListCallAnalyticsJobsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-transcribe/dist-es/pagination/ListLanguageModelsPaginator.js
var paginateListLanguageModels = createPaginator(TranscribeClient, ListLanguageModelsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-transcribe/dist-es/pagination/ListMedicalScribeJobsPaginator.js
var paginateListMedicalScribeJobs = createPaginator(TranscribeClient, ListMedicalScribeJobsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-transcribe/dist-es/pagination/ListMedicalTranscriptionJobsPaginator.js
var paginateListMedicalTranscriptionJobs = createPaginator(TranscribeClient, ListMedicalTranscriptionJobsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-transcribe/dist-es/pagination/ListMedicalVocabulariesPaginator.js
var paginateListMedicalVocabularies = createPaginator(TranscribeClient, ListMedicalVocabulariesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-transcribe/dist-es/pagination/ListTranscriptionJobsPaginator.js
var paginateListTranscriptionJobs = createPaginator(TranscribeClient, ListTranscriptionJobsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-transcribe/dist-es/pagination/ListVocabulariesPaginator.js
var paginateListVocabularies = createPaginator(TranscribeClient, ListVocabulariesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-transcribe/dist-es/pagination/ListVocabularyFiltersPaginator.js
var paginateListVocabularyFilters = createPaginator(TranscribeClient, ListVocabularyFiltersCommand, "NextToken", "NextToken", "MaxResults");
export {
  Command as $Command,
  BadRequestException,
  BaseModelName,
  CLMLanguageCode,
  CallAnalyticsFeature,
  CallAnalyticsJobStatus,
  CallAnalyticsSkippedReasonCode,
  ConflictException,
  CreateCallAnalyticsCategoryCommand,
  CreateLanguageModelCommand,
  CreateMedicalVocabularyCommand,
  CreateVocabularyCommand,
  CreateVocabularyFilterCommand,
  DeleteCallAnalyticsCategoryCommand,
  DeleteCallAnalyticsJobCommand,
  DeleteLanguageModelCommand,
  DeleteMedicalScribeJobCommand,
  DeleteMedicalTranscriptionJobCommand,
  DeleteMedicalVocabularyCommand,
  DeleteTranscriptionJobCommand,
  DeleteVocabularyCommand,
  DeleteVocabularyFilterCommand,
  DescribeLanguageModelCommand,
  GetCallAnalyticsCategoryCommand,
  GetCallAnalyticsJobCommand,
  GetMedicalScribeJobCommand,
  GetMedicalTranscriptionJobCommand,
  GetMedicalVocabularyCommand,
  GetTranscriptionJobCommand,
  GetVocabularyCommand,
  GetVocabularyFilterCommand,
  InputType,
  InternalFailureException,
  LanguageCode,
  LimitExceededException,
  ListCallAnalyticsCategoriesCommand,
  ListCallAnalyticsJobsCommand,
  ListLanguageModelsCommand,
  ListMedicalScribeJobsCommand,
  ListMedicalTranscriptionJobsCommand,
  ListMedicalVocabulariesCommand,
  ListTagsForResourceCommand,
  ListTranscriptionJobsCommand,
  ListVocabulariesCommand,
  ListVocabularyFiltersCommand,
  MediaFormat,
  MedicalContentIdentificationType,
  MedicalScribeJobStatus,
  MedicalScribeLanguageCode,
  MedicalScribeParticipantRole,
  ModelStatus,
  NotFoundException,
  OutputLocationType,
  ParticipantRole,
  PiiEntityType,
  RedactionOutput,
  RedactionType,
  Rule,
  SentimentValue,
  Specialty,
  StartCallAnalyticsJobCommand,
  StartMedicalScribeJobCommand,
  StartMedicalTranscriptionJobCommand,
  StartTranscriptionJobCommand,
  SubtitleFormat,
  TagResourceCommand,
  ToxicityCategory,
  Transcribe,
  TranscribeClient,
  TranscribeServiceException,
  TranscriptFilterType,
  TranscriptionJobStatus,
  Type,
  UntagResourceCommand,
  UpdateCallAnalyticsCategoryCommand,
  UpdateMedicalVocabularyCommand,
  UpdateVocabularyCommand,
  UpdateVocabularyFilterCommand,
  VocabularyFilterMethod,
  VocabularyState,
  Client as __Client,
  paginateListCallAnalyticsCategories,
  paginateListCallAnalyticsJobs,
  paginateListLanguageModels,
  paginateListMedicalScribeJobs,
  paginateListMedicalTranscriptionJobs,
  paginateListMedicalVocabularies,
  paginateListTranscriptionJobs,
  paginateListVocabularies,
  paginateListVocabularyFilters
};
//# sourceMappingURL=@aws-sdk_client-transcribe.js.map
